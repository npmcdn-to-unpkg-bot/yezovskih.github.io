{"version":3,"sources":["app.js","leafletService.js","leafletMap/leafletMap.js","leafletMapCtrl.js"],"names":["app","angular","module","service","this","removeAllMarkersFromMap","map","markers","i","length","removeLayer","renderAllMarkersOnMap","arr","m","_latlng","splice","createMarker","renderPolyline","polyline","setLatLngs","L","color","addTo","polylineDecorator","patterns","offset","repeat","symbol","Symbol","arrowHead","pixelSize","pathOptions","latlng","icon","divIcon","className","html","marker","lat","lng","draggable","push","directive","leafletService","$document","restrict","require","scope","ngModel","templateUrl","replace","controller","$scope","$element","$attrs","showModal","setView","tileLayer","attribution","maxZoom","selectedPoint","index","alt","documentClickHandler","e","modal","querySelector","contains","target","closeMapModalHandler","$apply","off","bind","addEventListenersToMarker","clickMarkerHandler","originalEvent","stopPropagation","ind","parseInt","_icon","dataset","pos","getLatLng","on","dragendMarkerHandler","undefined","setLatLng","pointClickHandler","deleteMarker","submitEditMarkerHandler","newInd","parseFloat","m1","m2","innerHTML","$on","controllerAs","bindToController","$http","coordinates","submitRoute","data","console","log","method","url","headers","Content-Type","then","res"],"mappings":"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","file":"app.js","sourcesContent":["'use strict'\r\n\r\nvar app = angular.module('myApp', []);\r\n\r\n\r\n","'use strict'\r\n\r\nangular.module('myApp').service('leafletService', function() {\r\n\r\n    // map: leaflet map object\r\n    this.removeAllMarkersFromMap = function(map, markers) {\r\n        for(var i = 0; i < markers.length; i++) {\r\n            map.removeLayer(markers[i]);\r\n        }\r\n    }\r\n\r\n    // map: leaflet map object\r\n    // markers: array of leaflet marker objects\r\n    this.renderAllMarkersOnMap = function(map, markers){\r\n        var arr = markers.map(function(m){ return m._latlng});\r\n\r\n        markers.splice(0, markers.length);\r\n\r\n        for(var i = 0; i < arr.length; i++) {\r\n            this.createMarker(map, markers, arr[i]);\r\n        }\r\n    }\r\n\r\n    // returns new polyline\r\n    this.renderPolyline = function(polyline, markers, map){\r\n        var arr = markers.map(function(m){ return m._latlng});\r\n\r\n        if(!polyline) {\r\n            polyline = L.polyline(arr, {color: 'red'}).addTo(map);\r\n        } else {\r\n           polyline.setLatLngs(arr);\r\n        }\r\n        var decorator = L.polylineDecorator(polyline, {\r\n            patterns: [\r\n                {\r\n                    offset: '100%', repeat: 0, symbol: new L.Symbol.arrowHead({pixelSize: 10, pathOptions: {color: 'red'}})\r\n                }\r\n            ]\r\n        }).addTo(map);\r\n\r\n        return polyline;\r\n    }\r\n\r\n    // adds marker to map.\r\n    // returns created leaflet marker object.\r\n    this.createMarker = function(map, markers, latlng) {\r\n        var icon = L.divIcon({className: 'leaflet-marker', html:'<div data-index=\"'+ markers.length +'\">'+ (markers.length + 1) +'</div>'});\r\n        var marker = L.marker([latlng.lat, latlng.lng],{icon: icon, draggable: true}).addTo(map);\r\n        markers.push(marker);\r\n        return marker;\r\n    }\r\n\r\n});\r\n\r\n","'use strict'\r\n\r\nangular.module('myApp').directive('leafletMap', ['leafletService', '$document', function(leafletService, $document) {\r\n    return {\r\n        restrict: \"EA\",\r\n        require: '^ngModel',\r\n        scope: {\r\n            ngModel: \"=\"\r\n        },\r\n        templateUrl: 'public/assets/partials/leafletMap.html',\r\n        replace: true,\r\n        controller: ['$scope', '$element', '$attrs', function($scope, $element, $attrs) {\r\n            this.showModal = false;\r\n\r\n            this.markers = [];\r\n            this.polyline = null;\r\n            this.map = L.map('leaflet-map').setView([50.4501, 30.5234], 13);\r\n\r\n            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n                attribution: 'Map data ï¿½ <a href=\"http://openstreetmap.org\">OpenStreetMap</a> contributors',\r\n                maxZoom: 18\r\n            }).addTo(this.map);\r\n\r\n            this.selectedPoint = {index: null, lat: null, lng: null, alt: null, marker: null};\r\n\r\n            var documentClickHandler = (function(e) {\r\n                var modal = $element[0].querySelector('.map-modal');\r\n                if (modal && !modal.contains(e.target)) {\r\n                    this.closeMapModalHandler();\r\n                    $scope.$apply();\r\n                    $document.off('click', documentClickHandler);\r\n                }\r\n            }).bind(this);\r\n\r\n            var addEventListenersToMarker = (function(marker) {\r\n\r\n                var clickMarkerHandler = (function(e){\r\n                    e.originalEvent.stopPropagation();\r\n\r\n                    var ind = parseInt(e.target._icon.querySelector('div').dataset.index);\r\n                    var pos = this.markers[ind].getLatLng();\r\n\r\n                    this.selectedPoint.index = ind + 1;\r\n                    this.selectedPoint.marker = this.markers[ind];\r\n                    this.selectedPoint.lat = pos.lat;\r\n                    this.selectedPoint.lng = pos.lng;\r\n                    this.selectedPoint.alt = pos.alt;\r\n\r\n                    this.showModal = true;\r\n\r\n                    $scope.$apply();\r\n                    $document.on('click', documentClickHandler);\r\n                }).bind(this);\r\n\r\n                var dragendMarkerHandler = (function(e) {\r\n                    var alt = marker._latlng.alt;\r\n                    var pos = {lat: e.target._latlng.lat, lng: e.target._latlng.lng};\r\n                    if(alt !== undefined) pos.alt = alt;\r\n\r\n                    marker.setLatLng(pos);\r\n\r\n                    this.polyline = leafletService.renderPolyline(this.polyline, this.markers, this.map);\r\n                    this.ngModel = this.markers.map(function(m){ return m._latlng});\r\n                }).bind(this);\r\n\r\n                marker.on('dragend', dragendMarkerHandler);\r\n                marker.on('click', clickMarkerHandler);\r\n\r\n            }).bind(this);\r\n\r\n            var pointClickHandler = (function (e) {\r\n                var latlng = e.latlng,\r\n                    marker = leafletService.createMarker(this.map, this.markers, latlng);\r\n\r\n                addEventListenersToMarker(marker);\r\n\r\n                this.polyline = leafletService.renderPolyline(this.polyline, this.markers, this.map);\r\n\r\n                this.ngModel = this.markers.map(function(m){ return m._latlng});\r\n            }).bind(this);\r\n\r\n            this.map.on('click', pointClickHandler);\r\n\r\n            this.deleteMarker = function(e) {\r\n                var ind = -1;\r\n\r\n                for(var i = 0; i < this.markers.length; i++){\r\n                    if(this.selectedPoint.marker === this.markers[i]) {\r\n                        ind = i;\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                // remove from array and render polyline\r\n                if(ind !== -1) {\r\n                    leafletService.removeAllMarkersFromMap(this.map, this.markers);\r\n                    this.markers.splice(ind, 1);\r\n                    leafletService.renderAllMarkersOnMap(this.map, this.markers);\r\n\r\n                    for(var i = 0; i < this.markers.length; i++) {\r\n                        addEventListenersToMarker(this.markers[i]);\r\n                    }\r\n                    this.polyline = leafletService.renderPolyline(this.polyline, this.markers, this.map);\r\n\r\n                    this.ngModel = this.markers.map(function(m){ return m._latlng});\r\n                }\r\n\r\n                this.showModal = false;\r\n            }\r\n\r\n            this.submitEditMarkerHandler = function() {\r\n                var ind = -1;\r\n                var newInd = parseInt(this.selectedPoint.index) - 1;\r\n                var latlng = {\r\n                    lat: parseFloat(this.selectedPoint.lat),\r\n                    lng: parseFloat(this.selectedPoint.lng)\r\n                };\r\n                if(this.selectedPoint.alt !== undefined) latlng.alt = parseFloat(this.selectedPoint.alt);\r\n\r\n                if(newInd > this.markers.length - 1) newInd = this.markers.length - 1;\r\n\r\n                for(var i = 0; i < this.markers.length; i++){\r\n                    if(this.markers[i] === this.selectedPoint.marker){\r\n                        ind = i;\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                if(ind !== newInd){\r\n                    var m1 = this.markers.splice(ind, 1)[0];\r\n                    var m2 = this.markers.splice(newInd, 1, m1)[0];\r\n                    this.markers.splice(ind, 0, m2);\r\n\r\n                    for(var i = 0; i < this.markers.length; i++){\r\n                        var html = this.markers[i]._icon.querySelector('div');\r\n                        html.dataset.index = i;\r\n                        html.innerHTML = i+1;\r\n                    }\r\n                }\r\n\r\n                this.selectedPoint.marker.setLatLng(latlng);\r\n\r\n                this.polyline = leafletService.renderPolyline(this.polyline, this.markers, this.map);\r\n\r\n                this.ngModel = this.markers.map(function(m){ return m._latlng});\r\n\r\n                this.closeMapModalHandler();\r\n            }\r\n\r\n            this.closeMapModalHandler = function() {\r\n                this.showModal = false;\r\n                this.selectedPoint = {index: null, lat: null, lng: null, alt: null, marker: null};\r\n                $document.off('click', documentClickHandler);\r\n            }\r\n\r\n            $scope.$on('destroy', function(){\r\n                $document.off('click', documentClickHandler);\r\n            });\r\n        }],\r\n        controllerAs: 'lm',\r\n        bindToController: true\r\n    }\r\n}])\r\n","angular.module('myApp').controller('leafletMapCtrl', ['$scope', '$http', function($scope, $http) {\r\n    this.coordinates = [];\r\n\r\n    this.submitRoute = function() {\r\n        var data = this.coordinates;\r\n        console.log(data)\r\n        $http({\r\n            method: 'POST',\r\n            url: '/saveRouting',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            data: data\r\n        }).then(\r\n            function success(res) {console.log(res)},\r\n            function error(res){console.log(res)}\r\n        )\r\n    }\r\n\r\n}])\r\n"],"sourceRoot":"/source/"}